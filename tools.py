# !/usr/bin/env python
    
#other={"X":"O","O":"X","ai":"ai"}

STARTED=4
AIP=2
GAMEOVER=8
DRAW=16
TURN=1
TIMEUP=32

import hashlib
from random import choice
from string import digits,ascii_lowercase
from datetime import datetime,timedelta
from django.utils import simplejson
sjd=simplejson.dumps

def randstr(len=16):
	return "".join([choice(digits+ascii_lowercase) for n in range(len)])

OFFLINE=120#time in seconds after last action after which the player is considered offline
hash_=lambda x:hashlib.md5(x).hexdigest()
def gurl(gpath,kname):
    return "/"+gpath+"/play?gameID="+kname


class MyError(Exception):
    """an exception which I know is generated by my program, usually as a client's request is wrong"""
    def __init__(self,msg):
        self.msg=msg
    def __str__(self):
        return str(self.msg)

#error handling
class Show(Exception):
    """An error class used to tell me parts of program state when debugging"""
    def __init__(self,s):
        self.s=s
    def __str__(self):
        return repr(self.s)

class InvalidInput(MyError):
    """An error class used to report when two things do not match when they should do"""
    def __init__(self,input,expected,msg):
        self.input=input
        self.expected=expected
        self.msg=msg
    def __str__(self):
        return "excpected: "+repr(self.expected)+"\nbut recieved"+repr(self.input)+"\n"+str(self.msg)
        
def check(a,b,msg):
    """raises an error if inputs are not equal"""
    if a!=b:raise InvalidInput(a,b,msg)


class HttpError(Exception):
    """Used to generate http errors"""
    def __init__(self,errNo):
        self.errNo=errNo

def errordec(f):
    def ret(self,*args):
        try: f(self,*args)
        except HttpError as e: self.error(e.errNo)
    return ret
